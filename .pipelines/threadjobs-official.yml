name: ThreadJob-ModuleBuild-$(Build.BuildId)
trigger: none
pr: none

schedules:
- cron: '0 3 * * 1'
  displayName: Weekly Build
  branches:
    include:
    - onebranch-pipelines
  always: true

parameters:
  - name: 'publishOfficialToPowerShellGallery'
    displayName: 'Publish official module to PowerShell gallery'
    type: boolean
    default: false
  - name : 'publishProxyToPowerShellGallery'
    displayName: 'Publish proxy module to PowerShell gallery'
    type: boolean
    default: false

variables:
  BuildConfiguration: Release
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  WindowsContainerImage: onebranch.azurecr.io/windows/ltsc2022/vse2022:latest

resources:
  repositories:
  - repository: templates
    type: git
    name: OneBranch.Pipelines/GovernedTemplates
    ref: refs/heads/main

extends:
  # https://aka.ms/obpipelines/templates
  template: v2/OneBranch.Official.CrossPlat.yml@templates
  parameters:
    release:
      category: NonAzure
    featureFlags:
      WindowsHostVersion:
        Version: 2022
        Network: Netlock
    globalSdl: # https://aka.ms/obpipelines/sdl
      asyncSdl:
        enabled: true
        forStages: [build]
      #credscan:
      #  enabled: true
      #  scanfolder: $(Build.SourcesDirectory)
      #  suppressionsFile: $(Build.SourcesDirectory)\.config\suppress.json
    stages:
    - stage: build
      jobs:
      - job: main
        displayName: Build package
        pool:
          type: windows
        variables:
        - name: ob_outputDirectory
          value: $(Build.SourcesDirectory)/out
        #- name: ob_sdl_credscan_suppressionsFile
        #  value: $(Build.SourcesDirectory)\.config\suppress.json
        steps:
          - pwsh: |
              Write-Verbose -Verbose ((Get-Item $(Build.SourcesDirectory)).FullName)
              Get-ChildItem $(Build.SourcesDirectory) -Recurse -File -Name | Write-Verbose -Verbose
              $manifestData = Import-PowerShellDataFile -Path src/Microsoft.PowerShell.ThreadJob.psd1
              $moduleVersion = $manifestData.ModuleVersion
              Write-Host "##vso[task.setvariable variable=version;isOutput=true]$moduleVersion"
              if ($manifestData.PrivateData.PsData.Prerelease) {
                $prerel = $manifestData.PrivateData.PSData.Prerelease
                $nupkgVersion = "${moduleVersion}-${prerel}"
              } else {
                $nupkgVersion = $moduleVersion
              }
              Write-Host "##vso[task.setvariable variable=nupkgversion;isOutput=true]$nupkgVersion"
            name: package
            displayName: Get version from project properties
          - task: onebranch.pipeline.version@1
            displayName: Set OneBranch version
            inputs:
              system: Custom
              customVersion: $(package.version)
          - task: UseDotNet@2
            displayName: Use .NET SDK
            inputs:
              packageType: sdk
              useGlobalJson: true
          - pwsh: |
              Get-ChildItem | Write-Verbose -Verbose
              Register-PSRepository -Name CFS -SourceLocation "https://pkgs.dev.azure.com/powershell/PowerShell/_packaging/powershell/nuget/v2" -InstallationPolicy Trusted
              Install-Module -Repository CFS -Name Microsoft.PowerShell.PSResourceGet -MinimumVersion 1.0.5
              .\build.ps1 -clean -Build -BuildConfiguration Release -BuildFramework netstandard2.0
            displayName: Build
          - task: onebranch.pipeline.signing@1
            displayName: Sign 1st-party files
            inputs:
              command: sign
              signing_profile: external_distribution
              search_root: $(Build.SourcesDirectory)/out
              files_to_sign: |
                **/*.psd1;
                **/*.ps1xml;
                **/*.psm1;
                **/Microsoft.PowerShell.*.dll;
          - task: ArchiveFiles@2
            displayName: Zip module
            inputs:
              rootFolderOrFile: $(Build.SourcesDirectory)/out/Microsoft.PowerShell.ThreadJob
              includeRootFolder: false
              archiveType: zip
              archiveFile: out/Microsoft.PowerShell.ThreadJob-v$(package.version).zip
          - task: ArchiveFiles@2
            displayName: Zip module
            inputs:
              rootFolderOrFile: $(Build.SourcesDirectory)/out/ThreadJob
              includeRootFolder: false
              archiveType: zip
              archiveFile: out/ThreadJob-v$(package.version).zip
          - pwsh: |
              Get-ChildItem | Write-Verbose -Verbose
              Write-Verbose -Verbose -Message "Install Microsoft.PowerShell.ThreadJob module"
              Copy-Item -Path $(Build.SourcesDirectory)/out/Microsoft.PowerShell.ThreadJob -Destination ($env:PSModulePath -split ';')[0] -Recurse -Force
              Write-Verbose -Verbose -Message "Test ThreadJob module manifest"
              Test-ModuleManifest -Path $(Build.SourcesDirectory)/out/ThreadJob/ThreadJob.psd1
              .\build.ps1 -Publish
              Write-Verbose -Verbose ((Get-Item .).FullName)
              Write-Verbose -Verbose ((Get-Item $(Build.SourcesDirectory)).FullName)
              Get-ChildItem $(Build.SourcesDirectory) -Recurse -File -Name | Write-Verbose -Verbose
            displayName: Package module
          - task: onebranch.pipeline.signing@1
            displayName: Sign NuGet package
            inputs:
              command: sign
              signing_profile: external_distribution
              search_root: $(Build.SourcesDirectory)
              files_to_sign: "**/*.nupkg"
    - stage: manual
      dependsOn: build
      jobs:
      - job: validation
        displayName: Manual validation
        pool:
          type: agentless
        timeoutInMinutes: 1440
        steps:
        - task: ManualValidation@0
          displayName: Wait 24 hours for validation
          inputs:
            notifyUsers: $(Build.RequestedForEmail)
            instructions: Please validate the release and then publish it!
            timeoutInMinutes: 1440
    - stage: release_official_MicrosoftPowerShellThreadJob_module
      displayName: release official
      variables:
        ob_release_environment: PPE
        drop: $(Pipeline.Workspace)/drop_build_main
        version: $[ stageDependencies.build.main.outputs['package.version'] ]
      dependsOn: [build, manual]
      condition: ${{ parameters.publishOfficialToPowerShellGallery }}
      jobs:
      - job: publish
        templateContext:
          inputs:
            - input: pipelineArtifact
              artifactName: drop_build_main
        displayName: Publish to PowerShell Gallery
        pool:
          type: release
          os: linux
        variables:
        - group: ThreadJob_Gallery_API
        steps:
        - task: Bash@3
          inputs:
            targetType: inline
            script: |
              sudo tdnf install -y powershell
            displayName: Install PowerShell
        - task: powershell@2
          inputs:
            pwsh: true
            targetType: inline
            script: |
              Write-Verbose -Verbose ((Get-Item $(Pipeline.Workspace)).FullName)
              Get-ChildItem $(Pipeline.Workspace) -Recurse -File -Name | Write-Verbose -Verbose
              Write-Verbose -Verbose -Message "Set up CFS repository"
              Register-PSRepository -Name CFS -SourceLocation "https://pkgs.dev.azure.com/powershell/PowerShell/_packaging/powershell/nuget/v2" -InstallationPolicy Trusted -ErrorAction Continue
              Write-Verbose -Verbose -Message "Install PSResourceGet module"
              Install-Module -Repository CFS -Name Microsoft.PowerShell.PSResourceGet -MinimumVersion 1.0.5 -ErrorAction Continue -Force
              Write-Verbose -Verbose -Message "Publish module to PSGallery"
              Publish-PSResource -ApiKey $env:GalleryPAT -Repository PSGallery -Path $(Pipeline.Workspace)/Microsoft.PowerShell.ThreadJob
          env: 
            GalleryPAT: $(ChungJustinAPIKey)
          displayName: Publish to PowerShell Gallery
    - stage: release_proxy_ThreadJob_module
      displayName: release proxy
      variables:
        ob_release_environment: PPE
        drop: $(Pipeline.Workspace)/drop_build_main
        version: $[ stageDependencies.build.main.outputs['package.version'] ]
      dependsOn: [build, manual]
      condition: ${{ parameters.publishProxyToPowerShellGallery }}
      jobs:
      - job: publish
        templateContext:
          inputs:
            - input: pipelineArtifact
              artifactName: drop_build_main
        displayName: Publish to PowerShell Gallery
        pool:
          type: release
          os: linux
        variables:
        - group: ThreadJob_Gallery_API
        steps:
        - task: Bash@3
          inputs:
            targetType: inline
            script: |
              sudo tdnf install -y powershell
            displayName: Install PowerShell
        - task: powershell@2
          inputs:
            pwsh: true
            targetType: inline
            script: |
              Write-Verbose -Verbose ((Get-Item $(Pipeline.Workspace)).FullName)
              Get-ChildItem $(Pipeline.Workspace) -Recurse -File -Name | Write-Verbose -Verbose
              Write-Verbose -Verbose -Message "Set up CFS repository"
              Register-PSRepository -Name CFS -SourceLocation "https://pkgs.dev.azure.com/powershell/PowerShell/_packaging/powershell/nuget/v2" -InstallationPolicy Trusted -ErrorAction Continue
              Write-Verbose -Verbose -Message "Install PSResourceGet module"
              Install-Module -Repository CFS -Name Microsoft.PowerShell.PSResourceGet -MinimumVersion 1.0.5 -ErrorAction Continue -Force
              Write-Verbose -Verbose -Message "Install Microsoft.PowerShell.ThreadJob module"
              Copy-Item -Path $(Pipeline.Workspace)/Microsoft.PowerShell.ThreadJob -Destination ($env:PSModulePath -split ':')[0] -Recurse -Force -Verbose
              Write-Verbose -Verbose -Message "Test ThreadJob module manifest"
              Test-ModuleManifest -Path $(Pipeline.Workspace)/ThreadJob/ThreadJob.psd1
              Write-Verbose -Verbose -Message "Publish module to PSGallery"
              Publish-PSResource -ApiKey $env:GalleryPAT -Repository PSGallery -Path $(Pipeline.Workspace)/ThreadJob
          env: 
            GalleryPAT: $(ChungJustinAPIKey)
          displayName: Publish to PowerShell Gallery